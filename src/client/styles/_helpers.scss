.relative {
  position: relative;
}
.absolute {
  position: absolute;
}
.sticky {
  position: sticky;
}
.color-bg-default {
  background-color: var(--color-bg-default);
}

// Visibility and display utilities
// Responsive display utilities
@each $breakpoint, $variant in $responsive-variants {
  @include respond-to($breakpoint) {
    @each $display in $display-values {
      .d#{$variant}-#{$display} {
        display: $display !important;
      }
    }
  }
}

.v-hidden {
  visibility: hidden;
}
.v-visible {
  visibility: visible;
}

// Hide utilities for each breakpoint
// Each hide utility only applies to one breakpoint range.
@media (max-width: ($width-sm - 0.02px)) {
  .hide-sm {
    display: none;
  }
}

@media (min-width: $width-sm) and (max-width: ($width-md - 0.02px)) {
  .hide-md {
    display: none;
  }
}

@media (min-width: $width-md) and (max-width: ($width-lg - 0.02px)) {
  .hide-lg {
    display: none;
  }
}

@media (min-width: $width-lg) {
  .hide-xl {
    display: none;
  }
}

// Show/Hide Viewport range utilities

.show-whenNarrow,
.show-whenRegular,
.show-whenWide,
.show-whenRegular.hide-whenWide {
  display: none;
}

.hide-whenNarrow,
.hide-whenRegular,
.hide-whenWide {
  display: block;
}

@media (max-width: ($width-md - 0.02px)) {
  .show-whenNarrow {
    display: block;
  }

  .hide-whenNarrow {
    display: none;
  }
}

@media (min-width: $width-md) {
  .show-whenRegular,
  .show-whenRegular.hide-whenWide {
    display: block;
  }

  .hide-whenRegular {
    display: none;
  }
}

@media (min-width: $width-xl) {
  .show-whenWide {
    display: block;
  }

  .hide-whenWide,
  .show-whenRegular.hide-whenWide {
    display: none;
  }
}

/* Set the table-layout to fixed */
.table-fixed {
  table-layout: fixed;
}

// Only display content to screen readers
//
// See: http://a11yproject.com/posts/how-to-hide-content/
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  // Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=1241631
  word-wrap: normal;
  border: 0;
}

// Only display content on focus
.show-on-focus {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: 0;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);

  &:focus {
    z-index: 20;
    width: auto;
    height: auto;
    clip: auto;
  }
}

// Margin spacer utilities

// Loop through the breakpoint values
@each $breakpoint, $variant in $responsive-variants {
  @include respond-to($breakpoint) {
    // Loop through the spacer values
    @each $scale, $size in $spacer-map-extended {
      @if ($scale < length($spacer-map)) {
        .m#{$variant}-#{$scale} {
          margin: $size;
        }
      }

      .mt#{$variant}-#{$scale} {
        margin-top: $size;
      }
      .mb#{$variant}-#{$scale} {
        margin-bottom: $size;
      }

      @if ($scale < length($spacer-map)) {
        /* Set a $size margin on the right at $breakpoint */
        .mr#{$variant}-#{$scale} {
          margin-right: $size;
        }
        /* Set a $size margin on the left at $breakpoint */
        .ml#{$variant}-#{$scale} {
          margin-left: $size;
        }
      }

      @if ($size != 0) {
        /* Set a negative $size margin on top at $breakpoint */
        .mt#{$variant}-n#{$scale} {
          margin-top: -$size;
        }
        /* Set a negative $size margin on the bottom at $breakpoint */
        .mb#{$variant}-n#{$scale} {
          margin-bottom: -$size;
        }

        @if ($scale < length($spacer-map)) {
          /* Set a negative $size margin on the right at $breakpoint */
          .mr#{$variant}-n#{$scale} {
            margin-right: -$size;
          }
          /* Set a negative $size margin on the left at $breakpoint */
          .ml#{$variant}-n#{$scale} {
            margin-left: -$size;
          }
        }
      }

      @if ($scale < length($spacer-map)) {
        /* Set a $size margin on the left & right at $breakpoint */
        .mx#{$variant}-#{$scale} {
          margin-right: $size;
          margin-left: $size;
        }
      }

      .my#{$variant}-#{$scale} {
        margin-top: $size;
        margin-bottom: $size;
      }
    }

    .mx#{$variant}-auto {
      margin-right: auto;
      margin-left: auto;
    }
  }
}

.m-auto {
  margin: auto;
}

.mt-auto {
  margin-top: auto;
}
.mr-auto {
  margin-right: auto;
}
.mb-auto {
  margin-bottom: auto;
}
.ml-auto {
  margin-left: auto;
}

// Padding spacer utilities

// Responsive padding spacer utilities
@each $breakpoint, $variant in $responsive-variants {
  @include respond-to($breakpoint) {
    // Loop through the spacer values
    @each $scale, $size in $spacer-map-extended {
      @if ($scale < length($spacer-map)) {
        /* Set a $size padding to all sides at $breakpoint */
        .p#{$variant}-#{$scale} {
          padding: $size;
        }
      }

      /* Set a $size padding to the top at $breakpoint */
      .pt#{$variant}-#{$scale} {
        padding-top: $size;
      }
      /* Set a $size padding to the right at $breakpoint */
      .pr#{$variant}-#{$scale} {
        padding-right: $size;
      }
      /* Set a $size padding to the bottom at $breakpoint */
      .pb#{$variant}-#{$scale} {
        padding-bottom: $size;
      }
      /* Set a $size padding to the left at $breakpoint */
      .pl#{$variant}-#{$scale} {
        padding-left: $size;
      }

      @if ($scale < length($spacer-map)) {
        /* Set a $size padding to the left & right at $breakpoint */
        .px#{$variant}-#{$scale} {
          padding-right: $size;
          padding-left: $size;
        }
      }

      /* Set a $size padding to the top & bottom at $breakpoint */
      .py#{$variant}-#{$scale} {
        padding-top: $size;
        padding-bottom: $size;
      }
    }
  }
}

// responsive padding for containers
.p-responsive {
  padding-right: $spacer-3;
  padding-left: $spacer-3;

  @include respond-to(sm) {
    padding-right: $spacer-6;
    padding-left: $spacer-6;
  }

  @include respond-to(lg) {
    padding-right: $spacer-3;
    padding-left: $spacer-3;
  }
}

// Layout utilities

// Responsive utilities to position content
// No utilities for sm and xl breakpoints
@each $breakpoint, $variant in $marketing-position-variants {
  @include respond-to($breakpoint) {
    @each $scale, $size in $spacer-map-extended {
      @if ($size != 0 or $variant != "") {
        .top#{$variant}-#{$scale} {
          top: $size;
        }
        .right#{$variant}-#{$scale} {
          right: $size;
        }
        .bottom#{$variant}-#{$scale} {
          bottom: $size;
        }
        .left#{$variant}-#{$scale} {
          left: $size;
        }
      }

      @if ($size != 0) {
        .top#{$variant}-n#{$scale} {
          top: -$size;
        }
        .right#{$variant}-n#{$scale} {
          right: -$size;
        }
        .bottom#{$variant}-n#{$scale} {
          bottom: -$size;
        }
        .left#{$variant}-n#{$scale} {
          left: -$size;
        }
      }
    }
  }
}

// Negative offset columns
@each $breakpoint, $variant in $responsive-variants {
  @include respond-to($breakpoint) {
    @for $offset from 1 through 7 {
      .offset#{$variant}-n#{$offset} {
        margin-left: -($offset * 0.0833333333 * 100%);
      }
    }
  }
}

// Width and height utilities, especially needed when the
// dimensions of an image are set in HTML
.width-auto {
  width: auto;
}
.height-auto {
  height: auto;
}

// Make an object fill its parent
.object-fit-cover {
  object-fit: cover;
}

// Handling z-index
.z-1 {
  z-index: 1;
}
.z-2 {
  z-index: 2;
}
.z-3 {
  z-index: 3;
}

// Negative z-index
.z-n1 {
  z-index: -1;
}
.z-n2 {
  z-index: -2;
}

.border-top {
  border-top: 1px solid var(--color-border-default);
}
.border-bottom {
  border-bottom: 1px solid var(--color-border-default);
}

.label {
  display: inline-block;
  padding: 0 7px;
  font-size: 12px;
  font-weight: 500;
  line-height: 18px;
  white-space: nowrap;
  border: 1px solid transparent;
  border-radius: 2em;
  border-color: var(--color-border-default);
  &--secondary {
    color: var(--color-fg-muted);
    border-color: var(--color-border-default);
  }
}
