// Retina media query
@mixin retina-media-query {
  @media only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min--moz-device-pixel-ratio: 2),
    only screen and (-moz-min-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx) {
    @content;
  }
}

// Clearfix
// Clears floats via mixin.

@mixin clearfix {
  &::before {
    display: table;
    content: "";
  }

  &::after {
    display: table;
    clear: both;
    content: "";
  }
}

// Layout component
.Layout {
  display: grid;
  --Layout-sidebar-width: #{map-get($sidebar-width, "sm")};
  --Layout-gutter: 16px;

  @media (max-width: calc(#{$width-sm} - 0.02px)) {
    @include flow-as-row;
  }

  &.Layout--flowRow-until-md {
    @media (max-width: calc(#{$width-md} - 0.02px)) {
      @include flow-as-row;
    }
  }

  &.Layout--flowRow-until-lg {
    @media (max-width: calc(#{$width-lg} - 0.02px)) {
      @include flow-as-row;
    }
  }

  // Flow as column

  grid-auto-flow: column;
  grid-template-columns: auto 0 minmax(
      0,
      calc(100% - var(--Layout-sidebar-width) - var(--Layout-gutter))
    ); // sidebar column, separator, main column
  grid-gap: var(--Layout-gutter);

  .Layout-sidebar {
    grid-column: 1;
  }

  .Layout-divider {
    display: none;
  }

  .Layout-main {
    grid-column: 2 / span 2;
  }

  // Gutter spacing

  @include respond-to(lg) {
    --Layout-gutter: 24px;
  }

  &.Layout--gutter-none {
    --Layout-gutter: 0px;
  }

  &.Layout--gutter-condensed {
    --Layout-gutter: 16px;
  }

  &.Layout--gutter-spacious {
    @include respond-to(lg) {
      --Layout-gutter: 32px;
    }

    @include respond-to(xl) {
      --Layout-gutter: 40px;
    }
  }

  // Sidebar width

  @each $breakpoint in map-keys($sidebar-width) {
    @include respond-to($breakpoint) {
      --Layout-sidebar-width: #{map-get($sidebar-width, $breakpoint)};
    }
  }

  &.Layout--sidebar-narrow {
    @each $breakpoint in map-keys($sidebar-narrow-width) {
      @include respond-to($breakpoint) {
        --Layout-sidebar-width: #{map-get($sidebar-narrow-width, $breakpoint)};
      }
    }
  }

  &.Layout--sidebar-wide {
    @each $breakpoint in map-keys($sidebar-wide-width) {
      @include respond-to($breakpoint) {
        --Layout-sidebar-width: #{map-get($sidebar-wide-width, $breakpoint)};
      }
    }
  }

  // Sidebar position

  &.Layout--sidebarPosition-start {
    .Layout-sidebar {
      grid-column: 1;
    }

    .Layout-main {
      grid-column: 2 / span 2;
    }
  }

  &.Layout--sidebarPosition-end {
    grid-template-columns:
      minmax(0, calc(100% - var(--Layout-sidebar-width) - var(--Layout-gutter)))
      0 auto;

    .Layout-main {
      grid-column: 1;
    }

    .Layout-sidebar {
      grid-column: 2 / span 2;
    }
  }

  // Sidebar divider

  &.Layout--divided {
    .Layout-divider {
      display: block;
      grid-column: 2;
      width: 1px;
      margin-right: -1px;
      background: var(--color-border-default);
    }

    .Layout-main {
      grid-column: 3 / span 1;
    }

    &.Layout--sidebarPosition-end {
      .Layout-sidebar {
        grid-column: 3 / span 1;
      }

      .Layout-main {
        grid-column: 1;
      }
    }
  }
}

.Layout-divider {
  display: none;
  width: 1px;
}

.Layout-sidebar {
  width: var(--Layout-sidebar-width);
}

.Layout-main {
  min-width: 0;

  // Centered main column
  // FIXME: right-aligned sidebar
  .Layout-main-centered-md,
  .Layout-main-centered-lg,
  .Layout-main-centered-xl {
    margin-right: auto;
    margin-left: auto;

    > .container-md,
    > .container-lg,
    > .container-xl {
      margin-left: 0;
    }
  }

  .Layout-main-centered-md {
    max-width: calc(
      #{$container-md} + var(--Layout-sidebar-width) + var(--Layout-gutter)
    );
  }

  .Layout-main-centered-lg {
    max-width: calc(
      #{$container-lg} + var(--Layout-sidebar-width) + var(--Layout-gutter)
    );
  }

  .Layout-main-centered-xl {
    max-width: calc(
      #{$container-xl} + var(--Layout-sidebar-width) + var(--Layout-gutter)
    );
  }
}

// Width and height utilities, helpful in combination
// with display-table utilities and images
/* Max width 100% */
.width-fit {
  max-width: 100% !important;
}
/* Set the width to 100% */
.width-full {
  width: 100% !important;
}
/* Max height 100% */
.height-fit {
  max-height: 100% !important;
}
/* Set the height to 100% */
.height-full {
  height: 100% !important;
}
/* Clear floats around the element */
.clearfix {
  @include clearfix;
}

/* Vertical align middle */
.v-align-middle {
  vertical-align: middle !important;
}
/* Vertical align top */
.v-align-top {
  vertical-align: top !important;
}
/* Vertical align bottom */
.v-align-bottom {
  vertical-align: bottom !important;
}
/* Vertical align to the top of the text */
.v-align-text-top {
  vertical-align: text-top !important;
}
/* Vertical align to the bottom of the text */
.v-align-text-bottom {
  vertical-align: text-bottom !important;
}
/* Vertical align to the parent's baseline */
.v-align-baseline {
  vertical-align: baseline !important;
}

// Floats
@each $breakpoint, $variant in $responsive-variants {
  @include respond-to($breakpoint) {
    /* Float to the left */
    .float#{$variant}-left {
      float: left !important;
    }
    /* Float to the right */
    .float#{$variant}-right {
      float: right !important;
    }
    /* No float */
    .float#{$variant}-none {
      float: none !important;
    }
  }
}
